'use client';

import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import '@rainbow-me/rainbowkit/styles.css';
import {
    getDefaultConfig,
    RainbowKitProvider,
} from '@rainbow-me/rainbowkit';
import {WagmiProvider, http} from 'wagmi';
import {
    mainnet,
    sepolia
} from 'wagmi/chains';
import {
    QueryClientProvider,
    QueryClient,
} from "@tanstack/react-query";
import { BalanceProvider } from "@/app/BalanceContext";

const config = getDefaultConfig({
    appName: 'my-erc20-dapp',
    projectId: '8b1891b3443d4d7d7da7bc070de5bdae',
    chains: [sepolia, mainnet],
    ssr: true, // If your dApp uses server side rendering (SSR)
    transports: {
        [mainnet.id]: http(),
        [sepolia.id]: http(),
    }
});

const queryClient = new QueryClient();

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>
      <WagmiProvider config={config}>
          <QueryClientProvider client={queryClient}>
              <RainbowKitProvider>
                  <BalanceProvider>
                      {children}
                  </BalanceProvider>
              </RainbowKitProvider>
          </QueryClientProvider>
      </WagmiProvider>
      </body>
    </html>
  );
}
